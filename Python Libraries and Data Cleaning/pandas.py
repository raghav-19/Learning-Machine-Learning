# -*- coding: utf-8 -*-
"""pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10mkwl5eTL46wE1RkT4Yp1NCjC0qCxeLR

##Creating, Reading and Writing
"""

import pandas as pd;
fruits=pd.DataFrame({'Apples':[30],'Bananas':[21]})
#print(fruits)
fruit_sales=pd.DataFrame({'Apples':[35,41],
                          'Bananas':[21,34]},
                          index=['2017 Sales','2018 Sales']);
#print(fruit_sales)
ingredients=pd.Series(['4 cups','1 cup','2 large','1 can'],index=['Flour','Milk','Eggs','Spam'],name='Dinner');
#print(ingredients)

def check(df):
  df['four']=df['three']+1

my=[[2,3,4],[5,4,3],[7,2,3]];
df=pd.DataFrame(my,columns=['one','two','three']);
check(df)
df

"""##Indexing,Selecting and Assigning"""

reviews=pd.read_csv("/content/drive/My Drive/Dataset/winemag.csv",index_col=0);
reviews.shape

"""##Summary Functions and Maps"""

point_mean=reviews.points.mean()
#reviews.points=reviews.points.map(lambda p: p-point_mean);
reviews.head()

reviews.fillna(0,inplace=True);
reviews['diff']=reviews.apply(lambda x : x['points']-x['price'],axis=1)

reviews[['points','price','diff']]

reviews.country.unique();
reviews.country.value_counts();
point_mean=reviews.points.mean();
reviews.points-point_mean;
bargain=reviews.points/reviews.price;
reviews.title[(reviews.points/reviews.price)==bargain.max()];

n_trop=reviews.description.map(lambda p : "tropical" in p).sum();
n_fruit=reviews.description.map(lambda p : "fruity" in p).sum();
pd.Series([n_trop,n_fruit],index=['tropical','fruity'])

def rating(row):
  if row.country=="Canada":
    return 3;
  return int((row.points-65)/10);
#reviews.apply(rating,axis=1);

"""##Data Type and Missing Values"""

reviews[pd.isnull(reviews.country)];
reviews.country.fillna("Unknown");
reviews.country.replace("Italy","Idli"); # just kidding
reviews.points.dtype;
reviews.points.astype('str');
reviews[pd.isnull(reviews.price)].shape[0];
reg_series=reviews.region_1.fillna("Unknown");
reg_series.value_counts();

"""##Renaming and Combining

####concat,join such that it increase no. of rows
####join  ,join such that it increase no. of cols
"""

reviews.rename(columns={'region_1':'region','region_2':'locale'});
reviews.rename_axis('wines',axis='rows');

"""##Grouping and Sorting"""

reviews.groupby(['taster_twitter_handle']).taster_twitter_handle.count();
reviews.groupby(['price']).points.max();
reviews.groupby(['variety']).price.agg([min,max]);
temp=reviews.groupby(['variety']).price.agg([min,max]);
temp.sort_values(by=['min','max'],ascending=False);
reviews.groupby(['taster_name']).points.mean();
reviews.groupby(['country','variety']).size().sort_values(ascending=False);

df1=pd.DataFrame({'col1':[1,2,4],
                  'col2':["rag","krat","new"]});
df2=pd.DataFrame({'col1':[1,2,3],
                  'age':[55,25,21]});

df=pd.merge(df1,df2,how='left',on='col1');
df.head()

df['cat']=df.apply(lambda x : "old" if x['age']>=55 else "adult" if x['age']>30 else "child",axis=1)
df.head()